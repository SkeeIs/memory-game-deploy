{"version":3,"sources":["components/Card/Card.js","components/Navbar/Navbar.js","components/Wrapper/Wrapper.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","value","id","onClick","handleClick","src","gif","alt","Navbar","message","score","highScore","newGame","Wrapper","children","shuffleArray","array","i","length","j","Math","floor","random","_ref","App","state","gifs","clicked","handleShuffle","shuffledGifs","_this","setState","friends","resetGame","event","console","log","indexOf","handleIncrement","concat","newScore","correctIncorrect","_this2","this","components_Navbar_Navbar","components_Wrapper_Wrapper","map","components_Card_Card","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.cc61c22b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n    <div className=\"card\" value={props.id} onClick={() => props.handleClick(props.id)}>\n    <img src={props.gif} alt=\"head turn gif\"/>\n    </div>\n)\n\nexport default Card;","import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n  <nav className=\"navbar navbar-expand-lg\">\n    <h2 className=\"title\">Dramatic Head Turn Memory Game</h2>\n        <ul>\n        <li>\n          <div className=\"comms\">\n          {props.message}\n          </div>\n        </li>\n        <li>\n            <div className=\"render-score\">\n              Current Score: {props.score} \n            </div>\n        </li>\n        <li>\n            <div className=\"render-high-score\">\n              High Score: {props.highScore} \n            </div>\n        </li>\n        <li>\n            <button className=\"btn new-game\" onClick={props.newGame}>New Game</button>\n        </li>\n        </ul>\n  </nav>    \n);\n\nexport default Navbar;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"row\">\n            {props.children}\n          </div>\n        </div>\n      </div>\n    </div>\n);\n\nexport default Wrapper;","import React, { Component } from \"react\";\nimport gifs from \"./gifs.json\";\nimport Card from \"./components/Card\";\nimport Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport \"./App.css\"\n//shuffle helper function\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n      \n      let j = Math.floor(Math.random() * (i + 1));\n      \n      [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\n\nclass App extends Component {\n  //the states we will be tracking\n  state = {\n    gifs,\n    score: 0,\n    highScore: 0,\n    message: \"Click each gif once to win!\",\n    clicked: []\n  };\n  //when we need to shuffle images we will call on helper function\n  handleShuffle = () => {\n    let shuffledGifs = shuffleArray(gifs);\n    this.setState({ friends: shuffledGifs });\n  };\n  //on click of new game reset high score & all other states to starting values\n  resetGame = (event) => {\n    console.log(\"clear high score. new game.\");\n    \n    this.setState({\n      score: 0,\n      highScore: 0,\n      message: \"Click each gif once to win!\",\n      clicked: [],\n    });\n    this.handleShuffle();\n    };\n    //what gets called when you click the same image twice\n    newGame = (event) => {\n      console.log(\"new game.\");\n      \n      this.setState({\n        score: 0,\n        message: \"Game Over! You already turned that head!\",\n        clicked: [],\n      });\n      this.handleShuffle();\n      }\n    //essentially our game logic that checks if we've already clicked a gif\n    handleClick = id => {\n      if (this.state.clicked.length === 0) {\n        this.newGame()\n      }\n      if (this.state.clicked.indexOf(id) === -1) {\n        this.handleIncrement();\n        this.setState({ clicked: this.state.clicked.concat(id) });\n      } else {\n        this.newGame();\n      }\n    };\n    //each click of a new gif calls this\n    handleIncrement = () => {\n      const newScore = this.state.score + 1;\n      this.setState({\n        score: newScore,\n        message: \"You guessed correctly!\"\n      });\n      if (newScore >= this.state.highScore) {\n        this.setState({ highScore: newScore });\n      }\n      else if (newScore === 12) {\n        this.setState({ correctIncorrect: \"You got them all! Good Game!\" });\n      }\n      this.handleShuffle();\n    };\n\n  //what we render out to our index.js file\n  render() {\n    return ( \n      <div>   \n        <Navbar\n          score = {this.state.score}\n          highScore = {this.state.highScore}\n          message = {this.state.message}\n          newGame={this.resetGame}\n        />\n        <Wrapper>\n          {this.state.gifs.map(gifs => (\n            <Card\n              key = {gifs.id}\n              handleClick = {this.handleClick}\n              handleIncrement = {this.handleIncrement}\n              handleShuffle = {this.handleShuffle}\n              id = {gifs.id}\n              gif = {gifs.gif}\n            /> \n          ))}  \n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}